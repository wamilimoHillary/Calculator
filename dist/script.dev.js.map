{"version":3,"sources":["script.js"],"names":["screen","document","querySelector","buttons","querySelectorAll","currentInput","shouldResetScreen","updateScreen","value","forEach","button","addEventListener","classList","contains","includes","result","evaluateExpression","toString","expression","Function","error"],"mappings":";;AAAA;AACA,IAAMA,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,oBAAvB,CAAf;AACA,IAAMC,OAAO,GAAGF,QAAQ,CAACG,gBAAT,CAA0B,QAA1B,CAAhB,C,CAEA;;AACA,IAAIC,YAAY,GAAG,EAAnB;AACA,IAAIC,iBAAiB,GAAG,KAAxB,C,CAEA;;AACA,SAASC,YAAT,GAAwB;AACpBP,EAAAA,MAAM,CAACQ,KAAP,GAAeH,YAAf;AACH,C,CAED;;;AACAF,OAAO,CAACM,OAAR,CAAgB,UAAAC,MAAM,EAAI;AACtBA,EAAAA,MAAM,CAACC,gBAAP,CAAwB,OAAxB,EAAiC,YAAM;AACnC,QAAMH,KAAK,GAAGE,MAAM,CAACF,KAArB,CADmC,CAGnC;;AACA,QAAIA,KAAK,KAAK,WAAd,EAA2B;AACvBH,MAAAA,YAAY,GAAG,EAAf;AACAC,MAAAA,iBAAiB,GAAG,KAApB;AACAC,MAAAA,YAAY;AACZ;AACH,KATkC,CAWnC;;;AACA,QAAIG,MAAM,CAACE,SAAP,CAAiBC,QAAjB,CAA0B,UAA1B,CAAJ,EAA2C;AACvC,UAAIR,YAAY,KAAK,EAAjB,IAAuB,CAACC,iBAA5B,EAA+C;AAC3CD,QAAAA,YAAY,eAAQG,KAAR,MAAZ;AACAD,QAAAA,YAAY;AACf;;AACD;AACH,KAlBkC,CAoBnC;;;AACA,QAAIC,KAAK,KAAK,GAAd,EAAmB;AACf,UAAIH,YAAY,CAACS,QAAb,CAAsB,GAAtB,CAAJ,EAAgC;AAC5B,YAAMC,MAAM,GAAGC,kBAAkB,CAACX,YAAD,CAAjC;AACAA,QAAAA,YAAY,GAAGU,MAAM,CAACE,QAAP,EAAf;AACAX,QAAAA,iBAAiB,GAAG,IAApB;AACAC,QAAAA,YAAY;AACf;;AACD;AACH,KA7BkC,CA+BnC;;;AACA,QAAID,iBAAJ,EAAuB;AACnBD,MAAAA,YAAY,GAAGG,KAAf;AACAF,MAAAA,iBAAiB,GAAG,KAApB;AACH,KAHD,MAGO;AACHD,MAAAA,YAAY,IAAIG,KAAhB;AACH;;AACDD,IAAAA,YAAY;AACf,GAvCD;AAwCH,CAzCD,E,CA2CA;;AACA,SAASS,kBAAT,CAA4BE,UAA5B,EAAwC;AACpC,MAAI;AACA;AACA,WAAO,IAAIC,QAAJ,CAAa,YAAYD,UAAzB,GAAP;AACH,GAHD,CAGE,OAAOE,KAAP,EAAc;AACZ,WAAO,OAAP;AACH;AACJ","sourcesContent":["// Select the calculator screen and all buttons\r\nconst screen = document.querySelector('.calculator-screen');\r\nconst buttons = document.querySelectorAll('button');\r\n\r\n// Variable to store the current input\r\nlet currentInput = '';\r\nlet shouldResetScreen = false;\r\n\r\n// Function to update the screen\r\nfunction updateScreen() {\r\n    screen.value = currentInput;\r\n}\r\n\r\n// Function to handle button clicks\r\nbuttons.forEach(button => {\r\n    button.addEventListener('click', () => {\r\n        const value = button.value;\r\n\r\n        // Handle all-clear button\r\n        if (value === 'all-clear') {\r\n            currentInput = '';\r\n            shouldResetScreen = false;\r\n            updateScreen();\r\n            return;\r\n        }\r\n\r\n        // Handle operator buttons\r\n        if (button.classList.contains('operator')) {\r\n            if (currentInput !== '' && !shouldResetScreen) {\r\n                currentInput += ` ${value} `;\r\n                updateScreen();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Handle equal-sign button\r\n        if (value === '=') {\r\n            if (currentInput.includes(' ')) {\r\n                const result = evaluateExpression(currentInput);\r\n                currentInput = result.toString();\r\n                shouldResetScreen = true;\r\n                updateScreen();\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Handle number and dot buttons\r\n        if (shouldResetScreen) {\r\n            currentInput = value;\r\n            shouldResetScreen = false;\r\n        } else {\r\n            currentInput += value;\r\n        }\r\n        updateScreen();\r\n    });\r\n});\r\n\r\n// Function to evaluate the expression\r\nfunction evaluateExpression(expression) {\r\n    try {\r\n        // Use Function constructor to evaluate the expression\r\n        return new Function('return ' + expression)();\r\n    } catch (error) {\r\n        return 'Error';\r\n    }\r\n}\r\n"],"file":"script.dev.js"}